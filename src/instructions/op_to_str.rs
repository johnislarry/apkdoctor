pub(crate) fn op_to_str(op: u8) -> &'static str {
    match op {
        0x00 => "nop",
        0x01 => "move",
        0x02 => "move/from16",
        0x03 => "move/16",
        0x04 => "move-wide",
        0x05 => "move-wide/from16 vAA, vBBBB",
        0x06 => "move-wide/16 vAAAA, vBBBB",
        0x07 => "move-object vA, vB",
        0x08 => "move-object/from16 vAA, vBBBB",
        0x09 => "move-object/16 vAAAA, vBBBB",
        0x0a => "move-result vAA",
        0x0b => "move-result-wide vAA",
        0x0c => "move-result-object vAA",
        0x0d => "move-exception vAA",
        0x0e => "return-void",
        0x0f => "return vAA",
        0x10 => "return-wide vAA",
        0x11 => "return-object vAA",
        0x12 => "const/4 vA, #+B",
        0x13 => "const/16 vAA, #+BBBB",
        0x14 => "const vAA, #+BBBBBBBB",
        0x15 => "const/high16 vAA, #+BBBB0000",
        0x16 => "const-wide/16 vAA, #+BBBB",
        0x17 => "const-wide/32 vAA, #+BBBBBBBB",
        0x18 => "const-wide vAA, #+BBBBBBBBBBBBBBBB",
        0x19 => "const-wide/high16 vAA, #+BBBB000000000000",
        0x1a => "const-string vAA, string@BBBB",
        0x1b => "const-string/jumbo vAA, string@BBBBBBBB",
        0x1c => "const-class vAA, type@BBBB",
        0x1d => "monitor-enter vAA",
        0x1e => "monitor-exit vAA",
        0x1f => "check-cast vAA, type@BBBB",
        0x20 => "instance-of vA, vB, type@CCCC",
        0x21 => "array-length vA, vB",
        0x22 => "new-instance vAA, type@BBBB",
        0x23 => "new-array vA, vB, type@CCCC",
        0x24 => "filled-new-array {vC, vD, vE, vF, vG}, type@BBBB",
        0x25 => "filled-new-array/range {vCCCC .. vNNNN}, type@BBBB",
        0x26 => "fill-array-data vAA, +BBBBBBBB",
        0x27 => "throw vAA",
        0x28 => "goto +AA",
        0x29 => "goto/16 +AAAA",
        0x2a => "goto/32 +AAAAAAAA",
        0x2b => "packed-switch vAA, +BBBBBBBB",
        0x2c => "sparse-switch vAA, +BBBBBBBB",
        0x2d => "cmpl-float (lt bias)",
        0x2e => "cmpg-float (gt bias)",
        0x2f => "cmpl-double (lt bias)",
        0x30 => "cmpg-double (gt bias)",
        0x31 => "cmp-long",
        0x32 => "if-eq",
        0x33 => "if-ne",
        0x34 => "if-lt",
        0x35 => "if-ge",
        0x36 => "if-gt",
        0x37 => "if-le",
        0x38 => "if-eqz",
        0x39 => "if-nez",
        0x3a => "if-ltz",
        0x3b => "if-gez",
        0x3c => "if-gtz",
        0x3d => "if-lez",
        0x44 => "aget",
        0x45 => "aget-wide",
        0x46 => "aget-object",
        0x47 => "aget-boolean",
        0x48 => "aget-byte",
        0x49 => "aget-char",
        0x4a => "aget-short",
        0x4b => "aput",
        0x4c => "aput-wide",
        0x4d => "aput-object",
        0x4e => "aput-boolean",
        0x4f => "aput-byte",
        0x50 => "aput-char",
        0x51 => "aput-short	",
        0x52 => "iget",
        0x53 => "iget-wide",
        0x54 => "iget-object",
        0x55 => "iget-boolean",
        0x56 => "iget-byte",
        0x57 => "iget-char",
        0x58 => "iget-short",
        0x59 => "iput",
        0x5a => "iput-wide",
        0x5b => "iput-object",
        0x5c => "iput-boolean",
        0x5d => "iput-byte",
        0x5e => "iput-char",
        0x5f => "iput-short",
        0x60 => "sget",
        0x61 => "sget-wide",
        0x62 => "sget-object",
        0x63 => "sget-boolean",
        0x64 => "sget-byte",
        0x65 => "sget-char",
        0x66 => "sget-short",
        0x67 => "sput",
        0x68 => "sput-wide",
        0x69 => "sput-object",
        0x6a => "sput-boolean",
        0x6b => "sput-byte",
        0x6c => "sput-char",
        0x6d => "sput-short",
        0x6e => "invoke-virtual",
        0x6f => "invoke-super",
        0x70 => "invoke-direct",
        0x71 => "invoke-static",
        0x72 => "invoke-interface",
        0x74 => "invoke-virtual/range",
        0x75 => "invoke-super/range",
        0x76 => "invoke-direct/range",
        0x77 => "invoke-static/range",
        0x78 => "invoke-interface/range",
        0x7b => "neg-int",
        0x7c => "not-int",
        0x7d => "neg-long",
        0x7e => "not-long",
        0x7f => "neg-float",
        0x80 => "neg-double",
        0x81 => "int-to-long",
        0x82 => "int-to-float",
        0x83 => "int-to-double",
        0x84 => "long-to-int",
        0x85 => "long-to-float",
        0x86 => "long-to-double",
        0x87 => "float-to-int",
        0x88 => "float-to-long",
        0x89 => "float-to-double",
        0x8a => "double-to-int",
        0x8b => "double-to-long",
        0x8c => "double-to-float",
        0x8d => "int-to-byte",
        0x8e => "int-to-char",
        0x8f => "int-to-short",
        0x90 => "add-int",
        0x91 => "sub-int",
        0x92 => "mul-int",
        0x93 => "div-int",
        0x94 => "rem-int",
        0x95 => "and-int",
        0x96 => "or-int",
        0x97 => "xor-int",
        0x98 => "shl-int",
        0x99 => "shr-int",
        0x9a => "ushr-int",
        0x9b => "add-long",
        0x9c => "sub-long",
        0x9d => "mul-long",
        0x9e => "div-long",
        0x9f => "rem-long",
        0xa0 => "and-long",
        0xa1 => "or-long",
        0xa2 => "xor-long",
        0xa3 => "shl-long",
        0xa4 => "shr-long",
        0xa5 => "ushr-long",
        0xa6 => "add-float",
        0xa7 => "sub-float",
        0xa8 => "mul-float",
        0xa9 => "div-float",
        0xaa => "rem-float",
        0xab => "add-double",
        0xac => "sub-double",
        0xad => "mul-double",
        0xae => "div-double",
        0xaf => "rem-double",
        0xb0 => "add-int/2addr",
        0xb1 => "sub-int/2addr",
        0xb2 => "mul-int/2addr",
        0xb3 => "div-int/2addr",
        0xb4 => "rem-int/2addr",
        0xb5 => "and-int/2addr",
        0xb6 => "or-int/2addr",
        0xb7 => "xor-int/2addr",
        0xb8 => "shl-int/2addr",
        0xb9 => "shr-int/2addr",
        0xba => "ushr-int/2addr",
        0xbb => "add-long/2addr",
        0xbc => "sub-long/2addr",
        0xbd => "mul-long/2addr",
        0xbe => "div-long/2addr",
        0xbf => "rem-long/2addr",
        0xc0 => "and-long/2addr",
        0xc1 => "or-long/2addr",
        0xc2 => "xor-long/2addr",
        0xc3 => "shl-long/2addr",
        0xc4 => "shr-long/2addr",
        0xc5 => "ushr-long/2addr",
        0xc6 => "add-float/2addr",
        0xc7 => "sub-float/2addr",
        0xc8 => "mul-float/2addr",
        0xc9 => "div-float/2addr",
        0xca => "rem-float/2addr",
        0xcb => "add-double/2addr",
        0xcc => "sub-double/2addr",
        0xcd => "mul-double/2addr",
        0xce => "div-double/2addr",
        0xcf => "rem-double/2addr",
        0xd0 => "add-int/lit16",
        0xd1 => "rsub-int",
        0xd2 => "mul-int/lit16",
        0xd3 => "div-int/lit16",
        0xd4 => "rem-int/lit16",
        0xd5 => "and-int/lit16",
        0xd6 => "or-int/lit16",
        0xd7 => "xor-int/lit16",
        0xd8 => "add-int/lit8",
        0xd9 => "rsub-int/lit8",
        0xda => "mul-int/lit8",
        0xdb => "div-int/lit8",
        0xdc => "rem-int/lit8",
        0xdd => "and-int/lit8",
        0xde => "or-int/lit8",
        0xdf => "xor-int/lit8",
        0xe0 => "shl-int/lit8",
        0xe1 => "shr-int/lit8",
        0xe2 => "ushr-int/lit8",
        0xfa => "invoke-polymorphic {vC, vD, vE, vF, vG}, meth@BBBB, proto@HHHH",
        0xfb => "invoke-polymorphic/range {vCCCC .. vNNNN}, meth@BBBB, proto@HHHH",
        0xfc => "invoke-custom {vC, vD, vE, vF, vG}, call_site@BBBB",
        0xfd => "invoke-custom/range {vCCCC .. vNNNN}, call_site@BBBB",
        0xfe => "const-method-handle vAA, method_handle@BBBB",
        0xff => "const-method-type vAA, proto@BBBB",
        0x3e..=0x43 | 0x73 | 0x79..=0x7a | 0xe3..=0xf9 => "[unk]",
    }
}
